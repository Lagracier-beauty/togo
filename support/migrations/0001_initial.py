# Generated by Django 5.1.3 on 2025-07-30 14:56

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('orders', '0002_initial'),
        ('providers', '0002_auto_20250712_1609'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('general', 'Questions générales'), ('account', 'Compte utilisateur'), ('orders', 'Commandes'), ('payments', 'Paiements'), ('providers', 'Prestataires'), ('technical', 'Problèmes techniques')], max_length=20)),
                ('question', models.TextField()),
                ('answer', models.TextField()),
                ('is_featured', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'FAQs',
                'ordering': ['order', '-is_featured', 'question'],
            },
        ),
        migrations.CreateModel(
            name='Dispute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dispute_type', models.CharField(choices=[('service_quality', 'Qualité du service'), ('no_show', 'Prestataire absent'), ('payment', 'Problème de paiement'), ('pricing', 'Désaccord sur le prix'), ('damage', 'Dommages'), ('behavior', 'Comportement inapproprié'), ('other', 'Autre')], max_length=20)),
                ('customer_description', models.TextField(help_text='Description du problème par le client')),
                ('provider_response', models.TextField(blank=True, null=True)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('open', 'Ouvert'), ('investigating', "En cours d'enquête"), ('mediation', 'En médiation'), ('resolved', 'Résolu'), ('closed', 'Fermé')], default='open', max_length=20)),
                ('resolution', models.CharField(blank=True, choices=[('refund_full', 'Remboursement intégral'), ('refund_partial', 'Remboursement partiel'), ('service_redo', 'Refaire le service'), ('provider_warning', 'Avertissement prestataire'), ('provider_suspension', 'Suspension prestataire'), ('no_action', 'Aucune action'), ('other', 'Autre résolution')], max_length=20, null=True)),
                ('resolution_notes', models.TextField(blank=True, null=True)),
                ('refund_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('compensation_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer_disputes', to=settings.AUTH_USER_MODEL)),
                ('mediator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mediated_disputes', to=settings.AUTH_USER_MODEL)),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='dispute', to='orders.order')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='provider_disputes', to='providers.provider')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SupportTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_number', models.CharField(editable=False, max_length=20, unique=True)),
                ('subject', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('general', 'Question générale'), ('account', 'Problème de compte'), ('order', 'Problème de commande'), ('payment', 'Problème de paiement'), ('provider', 'Problème avec prestataire'), ('technical', 'Problème technique'), ('dispute', 'Litige'), ('other', 'Autre')], max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Faible'), ('medium', 'Moyenne'), ('high', 'Haute'), ('urgent', 'Urgente')], default='medium', max_length=10)),
                ('status', models.CharField(choices=[('open', 'Ouvert'), ('in_progress', 'En cours'), ('waiting_user', 'En attente utilisateur'), ('waiting_provider', 'En attente prestataire'), ('resolved', 'Résolu'), ('closed', 'Fermé')], default='open', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('satisfaction_rating', models.PositiveIntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], help_text='Note de satisfaction (1-5)', null=True)),
                ('satisfaction_comment', models.TextField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='support_tickets', to='orders.order')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_tickets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SupportMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('is_internal', models.BooleanField(default=False, help_text="Message interne (non visible par l'utilisateur)")),
                ('is_system', models.BooleanField(default=False, help_text='Message automatique du système')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='support.supportticket')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='SupportAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='support_attachments/')),
                ('filename', models.CharField(max_length=255)),
                ('file_size', models.PositiveIntegerField(help_text='Taille du fichier en bytes')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('message', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='support.supportmessage')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='support.supportticket')),
            ],
        ),
    ]
